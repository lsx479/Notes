【1】辅助控制语句
   
     1---goto语句

     2---break和continue语句
         break:用于从循环体内跳出循环体，即提前结束循环。break只能用在循环语句和switch语句中.
         continue:结束本次循环,接着判定下一次是否执行循环。

         ontinue与break的区别:continue直结束本次循环,而break终止本层循环.


     3---return语句
         return：结束当前函数，可以给函数的调用者返回一个结果

                 如果函数没有返回值，return语句可以省略，或者return;也可以


        return语句主要用于终止包含它的函数的执行，当然终止包含return语句的分支语句或循环语句，执行完return语句之后，将把控制转移给调用函数。
	若return终止的为主函数，控制返回到操作系统。根据它所在函数返回值的类型，return对<表达式>运算后，将其数值转换为相应的函数类型，返回给调用函数。
	return语句的一般形式:return ( <表达式> ) ;



【2】数组
     1---概念
        构造数据类型之一
	数组是具有一定顺序关系的若干个变量的集合，组成数组的各个变量称为数组的元素。
	数组中各元素的数据类型要求相同,用数组名和下标确定。
	数组可以是一维的，也可以是多维的。



     2---一维数组
	定义：所谓一维数组是指只有一个下标的数组。它在计算机的内存中是连续存储的。 
	C语言中，一维数组的说明一般形式如下：
		<存储类型>    <数据类型 >    <数组名>[<表达式>] ；

            

     3---一维数组的引用
	数组必须先定义，后使用
	只能逐个引用数组元素，不能一次引用整个数组
	数组元素表示形式：  数组名[下标]
	其中：下标可以是常量或整型表达式

	C语言对数组不作越界检查，使用时要注意

	不能用变量定义数组维数

      4---一维数组的初始化
	数组不初始化，其元素值为随机数
	对static数组元素不赋初值，系统会自动赋以0值
	只给部分数组元素赋初值 


      5---一维数组的遍历
	使用for循环
		
	练习：1，计算斐波那契数列前十项，并逆序输出
	      2，计算出数组中的最大值和其下标



      6---冒泡法排序
	排序过程：
		  （1）比较第一个数与第二个数，若为逆序a[0]>a[1]，则交换；然后比较第二个数与第三个数；依次类推，直至第n-1个数和第n个数比较为止――第一趟冒泡排序，结果最大的数被安置在最后一个元素位置上
	          （2）对前n-1个数进行第二趟冒泡排序，结果使次大的数被安置在第n-1个元素位置
	          （3）重复上述过程，共经过n-1趟冒泡排序后，排序结束


      7---简单选择法
	排序过程：
		  （1）首先通过n-1次比较，从n个数中找出最小的， 将它与第一个数交换―第一趟选择排序，结果最小的数被安置在第一个元素位置上
	          （2）再通过n-2次比较，从剩余的n-1个数中找出关键字次小的记录，将它与第二个数交换―第二趟选择排序
                  （3）重复上述过程，共经过n-1趟排序后，排序结束


【3】二维数组
	1---概念
		用两个下标表示数组中的元素

	2---定义
		数据类型　数组名[M][N];    

	3---二维数组的理解
		1）行列式的方式理解
		   第一个下标理解成行号，第二个下标理解成列号
                   元素的个数=行数*列数
			比如：int a[3][4]  则表示这是个3行4列的矩阵，共有3*4个元    
                                       
			*   *   *    *         a[0][0]   a[0][1]   a[0][2]  a[0][3]
                        *   *   *    *    =》  a[1][0]   a[1][1]   a[1][2]  a[1][3]
                        *   *   *    *         a[2][0]   a[2][1]   a[2][2]  a[2][3]
                   因为内存是一维的，所以二维数组在内存中也是连续存储的，按照行序优先的顺序

		2）数组的数组
		   二维数组可以看成一维数组，只是这个一维数组中的每个元素又都是一维数组

                   比如说:二维数组a[3][4],可以看成一维数组a[3],a[3]这个一维数组中有三个元素
			a[0]、a[1]、a[2],这些元素又都是长度为4一维数组
                        a[0]   ==>   a[0][0]   a[0][1]  a[0][2]  a[0][3]
                        a[1]   ==>   a[1][0]   a[1][1]  a[1][2]  a[1][3] 
                        a[2]   ==>   a[2][0]   a[2][1]  a[2][2]  a[2][3]




                练习：1，遍历二维数组
                      2，求二维数组的最大值和下标
			
 