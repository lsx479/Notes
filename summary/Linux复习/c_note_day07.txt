【1】函数的概念
	函数是一个完成特定功能的代码模块，其程序代码独立，通常要求有返回值，也可以是空值

	一般形式如下:
			<数据类型>  <函数名称>( <形式参数说明> )	
			{	            
				语句序列；	            
				return[(<表达式>)];	
			} 
		<函数名称>是一个标识符，要求符合标识符的命名规则；
		<数据类型>是整个函数的返回值类型，如无返回值应该写为void型；
		<形式参数说明>是逗号”，”分隔的多个变量的说明形式，通常简称为形参；
		大括弧对 {<语句序列> }，称为函数体；<语句序列>是大于等于零个语句构成的。
		注意：在函数体中，表达式语句里使用的变量必须事先已有说明，否则不能使用。 
		return[(<表达式>)]语句中表达式的值，要和函数的<数据类型>保持一致；如函数的<数据类型>为void可以省略或者无表达式结果返回（即写成return ;）。



【2】函数的声明
	如果函数定义在main函数的下面，需要进行声明
	函数的说明就是指函数原型 
	其中，<形式参数说明>可以缺省说明的变量名称，但类型不能缺省。  		
	例如， double  Power(double x, int n) ;            double  Power(double, int);


【3】函数的调用
	函数的使用也叫函数的调用,形式如下：函数名称（〈实际参数〉）
	<函数名称>是一个标识符，符合标识符的命名规则；〈实际参数〉需要确切的数据，也可以是具有确定值的表达式。实参就是在使用函数时，调用函数传递给被调用函数的数据，用以完成所要求的任务。 
	注意：	函数调用可以作为一个运算量出现在表达式中，也可以单独形成一个语句。对于无返回值的函数来讲，只能形成一个函数调用语句。


【4】函数的参数传递
	
	复制传递方式（值传递）：不会影响实参的值

		复制传递方式是函数间传递数据常用的式。调用函数将实参传递给被调用函数，被调用函数将创建同类型的形参并用实参初始化。即把实参赋给一个新的变量，把实参复制到新建形参的存储区域中。采用复制传递方式传递数据，被调用函数不能访问调用函数里的实参。被调用函数处理的数据是复制到其形参的数据，因此，即使改变形参的值也不会影响实参的值，一旦被调用函数完成了其任务时，这些形参通常就释放其占用空间 。
	
	地址传递方式：会对实参的值产生影响

		地址传递方式和复制传递方式正好相反，这种方式是将调用函数的参数本身传给被调用函数。因此，被调用函数中对形参的操作，将直接改变实参的值。调用函数将实参的地址传送给被调用函数，被调用函数对该地址的目标操作，相当于对实参本身的操作。按地址传递,实参为变量的地址，而形参为同类型的指针。
	
	全局变量
		
		全局变量就是在函数体外说明的变量，它们在程序中的每个函数里都是可见的。实际上，全局变量也是一种静态型的变量。将它初始化为0。全局变量一经定义后就会在程序的任何地方可见。使用全局变量传递数据的先后顺序的不同会影响计算结果，应用顺序不当，会导致错误，这种方式尽量少用。


【5】函数的传参-数组

	复制传递方式

		函数与函数之间的数组传递，复制传递方式只是提供一种形式，被调用函数的形参数组的数组名实际上是一个指针变量，因此，复制传递方式与数组的指针传递方式完全相同，只是形参的说明形式不同而已。调用函数将实参数组传递给被调用函数形参，形参接收是实参的地址。由于复制传递方式与下节介绍的指针传递方式一样，被调用函数里对形参数组的操作会影响调用函数里的实参数组。形参数组的说明形式好像是实参的备份，其实不然。
	
	地址传递方式

		函数与函数之间数组的地址传递方式是将调用函数中的实参数组的起始地址传递给被调用函数的指针变量形参。因此，被调用函数中对形参地址的目标操作，相当于对实参本身的操作，将直接改变实参数组的值。地址传递方式,实参应该为数组的指针，而形参应为同类型的指针变量。另外，数组的地址传递方式不仅要把实参数组的指针作为参数传递给函数，同时还需要传递数组的长度。	


【6】指针函数
	指针函数是指一个函数的返回值为地址量的函数。通常一个函数都有返回值的数据类型。如果一个函数没有返回值，则该函数是一个无值型函数。指针函数只不过是一个函数的返回值是某一数据类型变量的地址。
	指针函数的定义的一般形式如下：	
		<数据类型>  *<函数名称>(<参数说明>)	
		{	      
			语句序列；	
		}
	<数据类型> 、<函数名称>、<形式参数说明> 等与一般函数定义相同；在<函数名称>之前的*符号，说明该函数返回   一个地址量。


【7】函数指针
	函数指针是用来存放函数的地址，这个地址是一个函数的入口地址，而且是函数调用时使用的起始地址。当一个函数指针指向了一个函数，就可以通过这个指针来调用该函数，函数指针可以将函数作为参数传递给其他函数调用。
	函数指针变量说明的一般形式如下：  <数据类型> （*<函数指针名称>)（<参数说明列表>)；
		<数据类型>是函数指针所指向的函数的返回值类型；
		<函数指针名称>符合标识符命名规则
		<参数说明列表>应该与函数指针所指向的函数的形参说明保持一致；
		（*<函数指针名称>）中，*说明为指针（）不可缺省，表明为函数的指针。 




【8】函数指针数组
	函数指针数组是一个保存若干个函数名的数组
	
	一般形式如下：<数据类型>    ( * <函数指针数组名称> [<大小>] ) ( <参数说明列表> )；
	其中，<大小>是指函数指针数组元数的个数，其它同函数指针。
	