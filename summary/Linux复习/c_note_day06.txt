【1】练习：
		输出一个十行的杨辉三角
			1
			1	1
			1	2	1
			1	3	3	1
			1	4	6	4	1
			1	5	10	10	5	1
			1	6	15	20	15	6	1
			1	7	21	35	35	21	7	1
			1	8	28	56	70	56	28	8	1
			1	9	36	84	126	126	84	36	9	1


【2】二维数组的初始化
	
	1---分行初始化
		全部初始化  int a[2][3] = {{3, 4, 2}, {4, 3, 8}}
		部分初始化  int a[2][3] = {{5 ,4}, {5, 6}}
		省略行号初始化  int a[][3] = {{4, 8}, {3, 9}}

	2---按照元素排列顺序初始化

		全部初始化   int a[2][3] = {4, 5, 9, 3, 9, 2}
		部分初始化   int a[2][3] = {4, 9, 0, 3}
		省略行号初始化	int a[][3] = {5, 7, 9, 0, 1}

	练习：计算二维数组的最大值和下标


【3】字符数组与字符串
	字符数组是元素的数据类型为字符类型的数组,它既具有普通数组的一般性质,又具有某些特殊性质。
	char ch[3];   char ch[3][4];
	1---字符数组的初始化
		1）逐个字符进行赋值
			char ch[4] = {'a', 'c', 'd', 'f'};

		2)字符串常量进行赋值
			char ch[5] = "good";
			注意字符串常量后面的'\0'字符，字符串常量后面都有一个'\0'字符，作为字符串的结束标志


	2---字符串
		无字符串变量，用字符数组处理字符串
		字符串结束标志：‘\0’
		字符串在计算长度的时候不包括'\0'
		比如："hello"   占6个字节的内存空间，但是长度为5

	3---字符串的输出
		1)可以逐个字符进行输出   %c 
		2）也可以整个字符串进行输出  %s
			使用%s输出字符串，遇到'\0'结束


	4---字符串的输入
		scanf使用%s读取字符串的时候，遇到空格、回车或者tab即结束
		
		练习：输入一个字符串，然后将其逆序输出


	5---字符串操作函数
		1）字符串连接函数strcat
			strcat格式：strcat(字符数组1,字符数组2)
			功能：把字符数组2连到字符数组1后面
			返值：返回字符数组1的首地址
			说明：?字符数组1必须足够大连接前,两串均以‘\0’结束;连接后,串1的‘\0’取消, 新串最后加‘\0’

		2)字符串拷贝函数strcpy
			strcpy格式：strcpy(字符数组1,字符串2)
			功能：将字符串2，拷贝到字符数组1中去
			返值：返回字符数组1的首地址
			说明：?字符数组1必须足够大拷贝时‘\0’一同拷贝不能使用赋值语句为一个字符数组赋值

		3)字符串比较函数strcmp
			strcmp格式：strcmp(字符串1,字符串2)
			功能：比较两个字符串
			比较规则：对两串从左向右逐个字符比较（ASCII码），直到遇到不同字符或‘\0’为止
			返值：返回int型整数，a. 若字符串1< 字符串2， 返回负整数-1                                                                                   b. 若字符串1> 字符串2， 返回正整数 1                                                                                   c. 若字符串1== 字符串2， 返回零
			说明：字符串比较不能用“==”,必须用strcmp

		4)字符串长度函数strlen
			strlen格式：strlen(字符数组)
			功能：计算字符串长度
			返值：返回字符串实际长度，不包括‘\0’在内


【4】指针
	1---概念
		在计算机内部存储器（简称内存）中，每一个字节单元，都有一个编号，称为地址。
		在C语言中，内存单元的地址称为指针，专门用来存放地址的变量，称为指针变量(pointer variable)。
		在不影响理解的情况中，有时对地址、指针和指针变量不区分，通称指针。

	2---&与*运算符
		&含义: 取变量的地址单目运算符
		优先级: 2
		结合性:自右向左

		*含义: 取指针所指向变量的内容
		单目运算符
		优先级: 2
		结合性:自右向左
		两者关系：互为逆运算

	3---空指针
		所谓空指针就是指针变量的内容为零的状态
			int *p = 0;或者int *p = NULL;
		注意：空指针并不是指针存储器为空或没有的概念，而是指针存放着特定的值―零值。
		一般用来初始化指针变量，防止野指针

	4---指针变量的说明

		一般形式如下：    <存储类型>   <数据类型>   *<指针变量名> ;       例如，char  *p;
		指针的存储类型是指针变量本身的存储类型
		指针说明时指定的数据类型不是指针变量本身的数据类型，而是指针目标的数据类型。简称为指针的数据类型
		具有相同存储类型和数据类型的指针可以在一个说明语句中说明。 


	5---指针的初始化
		
		指针在说明的同时， 也可以被赋予初值，称为指针的初始化。
		 一般形式是：  		<存储类型>  <数据类型>  *<指针变量名> = <地址量> ; 
					比如 int m = 5;
					     int *p = &m;



	6---指针的运算
		指针运算是以指针变量所存放的地址量作为运算量而进行的运算。因此，指针运算的实质就是地址的计算。
		指针运算的种类是有限的，它只能进行算术运算、关系运算和赋值运算。
		
		1）算术运算
			+           p+n       指针向地址大的方向移动n个数据
			-           p-n       指针向地址小的方向移动n个数据
			++          p++或者++p  指针向地址大的方向移动1个数据
		        --          p--或者--p  指针向地址小的方向移动1个数据
			-           p-q         两指针之间相隔元素的个数



                        px+n表示的实际位置的地址量是：            
				(px) + sizeof(px的类型) * n
			px-n表示的实际位置的地址量是：         
				(px) - sizeof(px的类型) * n


		2）指针的关系运算
			两指针之间的关系运算表示它们指向的地址位置之间的关系。指向地址大的指针大于指向地址小的指针。
			具有不同数据类型的指针之间的关系运算没有意义，指向不同数据区域的数据的两指针之间，关系运算也没有意义。
			指针与一般整数变量之间的关系运算没有意义。但可以和零进行等于或不等于的关系运算，判断指针是否为空
			 >, < , ==, != , >=, <=


		3）指针的赋值运算
			指针的赋值运算是通过赋值运算符向指针变量送一个地址值。向一个指针变量赋值时，送的值必须是地址常量或指针变量，不能是普通的整数(除了赋零以外)。
			指针赋值运算常见的有以下几种形式：
				A.把一个普通变量的地址赋给一个具有相同数据类型的指针 
					比如：int *p, m;  p = &m;
				
				B.把一个已有地址值的指针变量赋给具有相同数据类型的另一个指针变量，例如，
					int *p, *q, n;  p = &n;  q = p;		
				C.把一个数组的地址赋给具有相同数据类型的指针。例如
					int a[5] = {4, 3, 2};
					int *p = a;	
				D.把零赋给一个指针。例如，
					int *p = 0;//表示指针的状态，什么也不指	
				E.复合形式，运算结果是一个地址量赋给一个具有相同数据类型的指针变量：	
					double  a[20],  *px=a,  *py ;   
					int  n=2 ;
		                	py = px+n ;
      	                                py = px-n ;	
		
	7---指针与数组
		在C语言中，数组的指针是指数组在内存中的起始地址，数组元素的地址是指数组元素在内存中的起始地址。 
		一维数组的数组名为一维数组的指针（起始地址）。
		注意：指针变量和数组在访问数组中元素时，一定条件下其使用方法具有相同的形式，因为指针变量和数组名都是地址量。但指针变量和数组的指针（或叫数组名）在本质上不同，指针变量是地址变量，而数组的指针是地址常量

		练习：1,实现字符串的反转，通过指针
                      2，实现strcpy，通过指针
                      3，实现atoi函数，通过指针